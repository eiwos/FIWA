// Generated by Haxe 3.4.0
(function () { "use strict";
var HxOverrides = function() { };
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var fiwa_Fiwa_$client = function() {
	this.game = new fiwa_extraclient_Game();
	this.player = new fiwa_extraclient_Player();
	this.extraiwa = new fiwa_extraclient_Extraiwa();
	this.iwa = new fiwa_Iwa_$client();
};
fiwa_Fiwa_$client.main = function() {
};
var fiwa_Iwa = function() {
	this.channels_format = new haxe_ds_StringMap();
	this.frames_apis = new haxe_ds_StringMap();
	this.url = window.location.href;
	this.functions = new haxe_ds_StringMap();
	this.frames = null;
	window.addEventListener("message",$bind(this,this.on_msg),false);
};
fiwa_Iwa.main = function() {
	new fiwa_Iwa();
};
fiwa_Iwa.prototype = {
	init_frame: function(id,url,back_color,back_img) {
		this.frames.push([url,id]);
		this.set_backround_color(id,back_color);
		this.set_backround_image(id,back_img);
		window.document.getElementById(id).contentWindow.getElementsByTagName("body")[0].insertAdjacentHTML("afterbegin","<script>var parenturl = '" + this.url + "';</script>");
	}
	,force_origin: function(id) {
		var frame = window.document.getElementById(id).contentWindow;
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var frameid = _g1[_g];
			++_g;
			if(frameid[1] == id) {
				if(frame.src != frameid[0]) {
					frame.src = frameid[0];
				}
				break;
			}
		}
	}
	,send_to_channel: function(channelid,msg) {
		var final_msg = [channelid,msg];
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			window.document.getElementById(id[1]).contentWindow.postMessage(final_msg,window.location.href);
		}
	}
	,send_to_origin: function(origin,msg,channelid) {
		var final_msg = [channelid,msg];
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			if(id[0] == origin) {
				window.document.getElementById(id[1]).contentWindow.postMessage(final_msg,window.location.href);
			}
		}
	}
	,send_to_frame: function(id,msg,channelid) {
		window.document.getElementById(id).contentWindow.postMessage([channelid,msg],window.location.href);
	}
	,register_frame: function(id,origin) {
		this.frames.push([origin,id]);
	}
	,register_function: function(channelid,the_function) {
		var _this = this.functions;
		var value = the_function;
		if(__map_reserved[channelid] != null) {
			_this.setReserved(channelid,value);
		} else {
			_this.h[channelid] = value;
		}
	}
	,get_frame_apis: function(frameid) {
		var _this = this.frames_apis;
		if(__map_reserved[frameid] != null) {
			return _this.getReserved(frameid);
		} else {
			return _this.h[frameid];
		}
	}
	,get_channel_format: function(channelid) {
		var _this = this.channels_format;
		if(__map_reserved[channelid] != null) {
			return _this.getReserved(channelid);
		} else {
			return _this.h[channelid];
		}
	}
	,all_backround_color: function(color) {
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			window.document.getElementById(id[1]).contentWindow.getElementsByTagName("body")[0].style.background = color;
		}
	}
	,all_backround_image: function(url) {
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			window.document.getElementById(id[1]).contentWindow.getElementsByTagName("body")[0].style.backgroundImage = "url(" + url + ")";
		}
	}
	,set_backround_color: function(id,color) {
		window.document.getElementById(id).contentWindow.getElementsByTagName("body")[0].style.background = color;
	}
	,set_backround_image: function(id,url) {
		window.document.getElementById(id).contentWindow.getElementsByTagName("body")[0].style.backgroundImage = "url(" + url + ")";
	}
	,on_msg: function(event) {
		var found = false;
		var element_id = null;
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			if(id[0] == event.origin) {
				found = true;
				element_id = id[1];
				break;
			}
		}
		if(found == true) {
			if(event.data[1] == null) {
				var key = event.data[0];
				var _this = this.channels_format;
				if(!(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key))) {
					var key1 = event.data[0];
					var value = event.data[4];
					var _this1 = this.channels_format;
					if(__map_reserved[key1] != null) {
						_this1.setReserved(key1,value);
					} else {
						_this1.h[key1] = value;
					}
				}
				var _this2 = this.frames_apis;
				var key2 = event.data[0];
				var value1 = event.data[3];
				var _this3 = __map_reserved[element_id] != null?_this2.getReserved(element_id):_this2.h[element_id];
				if(__map_reserved[key2] != null) {
					_this3.setReserved(key2,value1);
				} else {
					_this3.h[key2] = value1;
				}
			} else {
				var _g2 = 0;
				var key3 = event.data[0];
				var _this4 = this.functions;
				var _g11 = __map_reserved[key3] != null?_this4.getReserved(key3):_this4.h[key3];
				while(_g2 < _g11.length) {
					var the_function = _g11[_g2];
					++_g2;
					the_function(event.data[1],element_id);
				}
			}
		} else {
			console.log("Unstrusted frame mensage recived.");
		}
	}
	,get_frame: function(id) {
		return window.document.getElementById(id).contentWindow;
	}
};
var fiwa_Iwa_$client = function() {
	this.parent = window.parent;
	this.registered_channels = [];
	this.functions = new haxe_ds_StringMap();
	window.addEventListener("message",$bind(this,this.on_msg),false);
};
fiwa_Iwa_$client.main = function() {
	new fiwa_Iwa_$client();
};
fiwa_Iwa_$client.prototype = {
	send_to_parent: function(msg,channelid) {
		if(msg == null) {
			console.log("msg cannot be null");
		}
		this.parent.postMessage([channelid,msg],window.location.href);
	}
	,register_channel: function(channelid,format,api) {
		this.parent.postMessage([channelid,null,null,api,format],window.location.href);
	}
	,register_function: function(channelid,the_function) {
		var _this = this.functions;
		var value = the_function;
		if(__map_reserved[channelid] != null) {
			_this.setReserved(channelid,value);
		} else {
			_this.h[channelid] = value;
		}
	}
	,is_channel_registered: function(channelid) {
		if(this.registered_channels.indexOf(channelid) == -1) {
			return false;
		} else {
			return true;
		}
	}
	,on_msg: function(event) {
		if(window.parenturl == event.origin) {
			if(event.data[0] == null) {
				var _g = 0;
				var _this = this.functions;
				var _g1 = __map_reserved[null] != null?_this.getReserved(null):_this.h[null];
				while(_g < _g1.length) {
					var the_function = _g1[_g];
					++_g;
					the_function(event.data[1]);
				}
			} else {
				var _g2 = 0;
				var key = event.data[0];
				var _this1 = this.functions;
				var _g11 = __map_reserved[key] != null?_this1.getReserved(key):_this1.h[key];
				while(_g2 < _g11.length) {
					var the_function1 = _g11[_g2];
					++_g2;
					the_function1(event.data[1]);
				}
			}
		} else {
			console.log("Unstrusted parent mesage recived.");
		}
	}
};
var fiwa_extraclient_Extraiwa = function() {
	this.iwa = fiwa_Iwa_$client;
	this.parent_loaded = [];
	this.parent_has_loaded = false;
	this.iwa.register_channel("extraiwa","json","extraiwa-1");
	this.iwa.register_function("extraiwa",$bind(this,this.onmsg));
	window.addEventListener("DOMContentLoaded",$bind(this,this.onloaded));
};
fiwa_extraclient_Extraiwa.main = function() {
};
fiwa_extraclient_Extraiwa.prototype = {
	on_parent_loaded: function(the_function) {
		this.parent_loaded.push(the_function);
	}
	,play_finish: function() {
		this.iwa.send_to_channel("extraiwa",JSON.stringify({ msg : "finish"}));
	}
	,play_started: function() {
		this.iwa.send_to_channel("extraiwa",JSON.stringify({ msg : "playing"}));
	}
	,onloaded: function() {
		this.iwa.send_to_channel("extraiwa",JSON.stringify({ msg : "loaded"}));
	}
	,onmsg: function(data,element_id) {
		if(JSON.parse(data).msg == "loaded") {
			this.parent_has_loaded = true;
			var _g = 0;
			var _g1 = this.parent_loaded;
			while(_g < _g1.length) {
				var the_function = _g1[_g];
				++_g;
				the_function();
			}
		}
	}
};
var fiwa_extraclient_Game = function() {
	this.mobile_functions = [];
	this.user_functions = [];
	this.controller_functions = [];
	this.iwa = fiwa_Iwa_$client;
	this.iwa.register_function("extraplayer",$bind(this,this.onmsg));
};
fiwa_extraclient_Game.main = function() {
	new fiwa_extraclient_Game();
};
fiwa_extraclient_Game.prototype = {
	init_game: function(info,controllers,onuser) {
		var info_keys = this.to_array_string(info.keys());
		var info_values = this.to_array_string(new haxe_ds__$StringMap_StringMapIterator(info,info.arrayKeys()));
		var controllers_names = this.to_array_string(new haxe_ds__$StringMap_StringMapIterator(controllers,controllers.arrayKeys()));
		var controllers_keys = this.to_array_string(controllers.keys());
		this.iwa.send_to_parent(JSON.stringify({ msg : "set_game_info", info_keys : info_keys, info_values : info_values}),"extragame");
		this.iwa.send_to_parent(JSON.stringify({ msg : "set_controllers", controllers_names : controllers_names, controllers_keys : controllers_keys}),"extragame");
		this.user_functions.push(onuser);
	}
	,set_mobile: function() {
		this.iwa.send_to_parent(JSON.stringify({ msg : "set_mobile"}),"extragame");
	}
	,on_mobile_controllers: function(the_function) {
		this.mobile_functions.push(the_function);
	}
	,on_controller: function(the_function) {
		this.controller_functions.push(the_function);
	}
	,set_leadboard: function(leadboard) {
		var names = this.to_array_string(leadboard.keys());
		var scores = this.to_array_int(new haxe_ds__$StringMap_StringMapIterator(leadboard,leadboard.arrayKeys()));
		this.iwa.send_to_parent(JSON.stringify({ msg : "update_leadboard", leadboard_names : names, leadboard_values : scores}),"extragame");
	}
	,set_value: function(name,value) {
		this.iwa.send_to_parent(JSON.stringify({ msg : "update_value", value_name : name, value : value}),"extragame");
	}
	,on_user: function(the_function) {
		this.user_functions.push(the_function);
	}
	,to_array_string: function(iterator) {
		var $final = [];
		while(iterator.hasNext()) $final.push(iterator.next());
		return $final;
	}
	,to_array_int: function(iterator) {
		var $final = [];
		while(iterator.hasNext()) $final.push(iterator.next());
		return $final;
	}
	,onmsg: function(data) {
		var data1 = JSON.parse(data);
		if(data1.msg == "set_controller") {
			var _g = 0;
			var _g1 = this.controller_functions;
			while(_g < _g1.length) {
				var the_function = _g1[_g];
				++_g;
				the_function(data1.name,data1.key);
			}
		} else if(data1.msg == "set_mobile_controller") {
			var _g2 = 0;
			var _g11 = this.mobile_functions;
			while(_g2 < _g11.length) {
				var the_function1 = _g11[_g2];
				++_g2;
				the_function1(data1.show);
			}
		} else if(data1.msg == "set_css") {
			window.document.getElementsByTagName("head")[0].insertAdjacentHTML("beforeend","<style>" + data1.css + "</style>");
		} else if(data1.msg == "set_user") {
			var _g3 = 0;
			var _g12 = this.user_functions;
			while(_g3 < _g12.length) {
				var the_function2 = _g12[_g3];
				++_g3;
				the_function2(data1.name,data1.session);
			}
		}
	}
};
var fiwa_extraclient_Player = function() {
	this.iwa = fiwa_Iwa;
	this.media_functions = [];
	this.quality_functions = [];
	this.controls_functions = [];
	this.time_functions = [];
	this.status_functions = [];
	this.iwa.register_function("extraplayer",$bind(this,this.onmsg));
};
fiwa_extraclient_Player.main = function() {
	new fiwa_extraclient_Player();
};
fiwa_extraclient_Player.prototype = {
	init_player: function(sources,qualities,media_info,media_duration,controls) {
		var info_keys = this.to_array_string(media_info.keys());
		var info_value = this.to_array_string(new haxe_ds__$StringMap_StringMapIterator(media_info,media_info.arrayKeys()));
		var controls_keys = this.to_array_string(controls.keys());
		var controls_values = this.to_array_int(new haxe_ds__$StringMap_StringMapIterator(controls,controls.arrayKeys()));
		this.iwa.send_to_parent(JSON.stringify({ msg : "update_sources", sources : sources}),"extraplayer");
		this.iwa.send_to_parent(JSON.stringify({ msg : "update_qualities", qualities : qualities}),"extraplayer");
		this.iwa.send_to_parent(JSON.stringify({ msg : "update_media", duration : media_duration, info_keys : info_keys, info_values : info_value}),"extraplayer");
		this.iwa.send_to_parent(JSON.stringify({ msg : "update_controls", controls : controls_keys, values : controls_values}),"extraplayer");
	}
	,on_status_changed: function(the_function) {
		this.status_functions.push(the_function);
	}
	,set_player_status: function(status) {
		this.iwa.send_to_parent(JSON.stringify({ msg : "update_status", status : status}),"extraplayer");
	}
	,set_current_time: function(time) {
		this.iwa.send_to_parent(JSON.stringify({ msg : "update_time", time : time}),"extraplayer");
	}
	,on_time_changed: function(the_function) {
		this.time_functions.push(the_function);
	}
	,on_control_changed: function(the_function) {
		this.controls_functions.push(the_function);
	}
	,set_control_value: function(control,value) {
		this.iwa.send_to_parent(JSON.stringify({ msg : "update_control", control : control, value : value}),"extraplayer");
	}
	,set_media_changed: function(media_info,media_duration,qualities) {
		var info_keys = this.to_array_string(media_info.keys());
		var info_value = this.to_array_string(new haxe_ds__$StringMap_StringMapIterator(media_info,media_info.arrayKeys()));
		this.iwa.send_to_parent(JSON.stringify({ msg : "update_media", duration : media_duration, info_keys : info_keys, info_values : info_value}),"extraplayer");
		if(qualities != null) {
			this.iwa.send_to_parent(JSON.stringify({ msg : "update_qualities", qualities : qualities}),"extraplayer");
		}
	}
	,on_media_changed: function(the_function) {
		this.media_functions.push(the_function);
	}
	,to_array_string: function(iterator) {
		var $final = [];
		while(iterator.hasNext()) $final.push(iterator.next());
		return $final;
	}
	,to_array_int: function(iterator) {
		var $final = [];
		while(iterator.hasNext()) $final.push(iterator.next());
		return $final;
	}
	,onmsg: function(data) {
		var data1 = JSON.parse(data);
		if(data1.msg == "set_status") {
			var _g = 0;
			var _g1 = this.status_functions;
			while(_g < _g1.length) {
				var the_function = _g1[_g];
				++_g;
				the_function(data1.status);
			}
		} else if(data1.msg == "set_time") {
			var _g2 = 0;
			var _g11 = this.time_functions;
			while(_g2 < _g11.length) {
				var the_function1 = _g11[_g2];
				++_g2;
				the_function1(data1.time);
			}
		} else if(data1.msg == "set_control_value") {
			var _g3 = 0;
			var _g12 = this.controls_functions;
			while(_g3 < _g12.length) {
				var the_function2 = _g12[_g3];
				++_g3;
				the_function2(data1.control,data1.value);
			}
		} else if(data1.msg == "set_media") {
			var _g4 = 0;
			var _g13 = this.media_functions;
			while(_g4 < _g13.length) {
				var the_function3 = _g13[_g4];
				++_g4;
				the_function3(data1.source,data1.media_id);
			}
		}
	}
};
var haxe_IMap = function() { };
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var __map_reserved = {}
fiwa_Fiwa_$client.main();
})();
